public class Bomb {
	private int duration;
	//direction
	private int x;
	private int y;
	private int width;
	private boolean exploded;
	private boolean doneExploding;
	private CountDown cd;
	
	/**creates bomb. starts counting down when created**/
	public Bomb(int duration, int x,int y, int width){
		this.duration = duration;
		this.x = x;
		this.y = y;
		this.width = width;
		exploded = false;
		doneExploding = false;
		cd = new CountDown(duration);
	
	}
	
	/**Checks if unexploded bomb's timer is finshed,
	if so sets exploded to true and resets timer**/
	public void updateBomb(){
		if(cd.check()){
			exploded = true;
			cd.reset(2);
		}
	}
	
	/**Checks if exploding bomb is done exploding, 
	if so sets doneExploding to true**/
	public void updateExplosion(){
		if(cd.check()){
			doneExploding = true;
		}
	}
	
	
	
	
	
	
	
	/**
	 returns isExploded**/
	public boolean isExploded() {
		return exploded;
	}
	
	/**
	 returns doneExploding**/
	public boolean isDoneExploding() {
		return doneExploding;
	}


	public int getX() {
		return x;
	}
	public int getY() {
		return y;
	}
	public int getWidth() {
		return width;
	}
	
	
	public void draw(int xCoor,int yCoor,String name){
		while(!exploded){
			drawBomb(x,y,pic,xcv);
			updateBomb();
		}
		if(exploded){
			while(!doneExploding){
				drawExplosion(x,y,"Explosion.png",xcv);
				updateExplosion();
			}
		}
	
	}
	
	private void drawBomb(int xCoor,int yCoor,String name){
		StdDraw.show(90);
		xcv.display();
		StdDraw.picture(x,y,pic,60,60);
		StdDraw.show();
		StdDraw.show(90);
		xcv.display();
		StdDraw.picture(x, y, pic, 50,50);
		StdDraw.show();
	
	}
	
	private void drawExplosion(int xCoor,int yCoor,String name){
				StdDraw.picture(xCoor, yCoor, "Explosion.png",60,60);
		StdDraw.show(120);
		xcv.display();
		for(int i = xCoor-120; i<=xCoor+120; i+=60){
			if(xcv.isValid(i,yCoor)){
				StdDraw.picture(i, yCoor, name, 60, 60);
//				if(xcv.getOccupants((int)(((i-30)*15)/900),14-((int)((((yCoor-30)*15)/900)+.5)))==2){
//					BreakableBlock b = (BreakableBlock)xcv.getObject((int)(((i-30)*15)/900),14-((int)((((yCoor-30)*15)/900)+.5)));
//					b.breakBlock(xcv);
//					xcv.removeOccupant((int)(((i-30)*15)/900),14-((int)((((yCoor-30)*15)/900)+.5)));
//				}
//				if(xcv.getOccupants((int)(((i-30)*15)/900),14-((int)((((yCoor-30)*15)/900)+.5)))==3){
//					Player p = (Player)xcv.getObject((int)(((i-30)*15)/900),14-((int)((((yCoor-30)*15)/900)+.5)));
//					p.dead();
//					xcv.removeOccupant((int)(((i-30)*15)/900),14-((int)((((yCoor-30)*15)/900)+.5)));
//				}
//				
			}else{
		         	break;
			}
		}
		
		for(int j = yCoor-120; j<=yCoor+120; j+=60){
			if(xcv.isValid(xCoor,j)){
				StdDraw.picture(xCoor, j, name, 60, 60);
//				if(xcv.getOccupants((int)(((xCoor-30)*15)/900),14-((int)((((j-30)*15)/900)+.5)))==2){
//					BreakableBlock b = (BreakableBlock)xcv.getObject((int)(((xCoor-30)*15)/900),14-((int)((((j-30)*15)/900)+.5)));
//					b.breakBlock(xcv);;
//					xcv.removeOccupant((int)(((xCoor-30)*15)/900),14-((int)((((j-30)*15)/900)+.5)));
//				}
//				if(xcv.getOccupants((int)(((xCoor-30)*15)/900),14-((int)((((j-30)*15)/900)+.5)))==3){
//					Player p = (Player)xcv.getObject((int)(((xCoor-30)*15)/900),14-((int)((((j-30)*15)/900)+.5)));
//					p.dead();
//					xcv.removeOccupant((int)(((xCoor-30)*15)/900),14-((int)((((j-30)*15)/900)+.5)));
//					
//				}
			}else{
		        	break;
			}
		}
		StdDraw.show();
		

	}
	}



}
